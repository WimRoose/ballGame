#include "testApp.h"

//--------------------------------------------------------------
void testApp::setup(){

	#ifdef _USE_LIVE_VIDEO
        vidGrabber.setVerbose(true);
        vidGrabber.initGrabber(320,240);
	#else
        vidPlayer.loadMovie("fingers.mov");
        vidPlayer.play();
	#endif

    colorImg.allocate(320,240);
	grayImage.allocate(320,240);
	grayBg.allocate(320,240);
	grayDiff.allocate(320,240);

	bLearnBakground = true;
	threshold = 80;
}

//--------------------------------------------------------------
void testApp::update(){
	ofBackground(100,100,100);

    bool bNewFrame = false;

	#ifdef _USE_LIVE_VIDEO
       vidGrabber.update();
	   bNewFrame = vidGrabber.isFrameNew();
    #else
        vidPlayer.update();
        bNewFrame = vidPlayer.isFrameNew();
	#endif

	if (bNewFrame){

		#ifdef _USE_LIVE_VIDEO
            colorImg.setFromPixels(vidGrabber.getPixels(), 320,240);
	    #else
            colorImg.setFromPixels(vidPlayer.getPixels(), 320,240);
        #endif

        grayImage = colorImg;
		if (bLearnBakground == true){
			grayBg = grayImage;		// the = sign copys the pixels from grayImage into grayBg (operator overloading)
			bLearnBakground = false;
		}

		// take the abs value of the difference between background and incoming and then threshold:
		grayDiff.absDiff(grayBg, grayImage);
		grayDiff.threshold(threshold);

		// find contours which are between the size of 20 pixels and 1/3 the w*h pixels.
		// also, find holes is set to true so we will get interior contours as well....
		contourFinder.findContours(grayDiff, 20, (340*240)/3, 1, false);	// find holes
	}

}

//--------------------------------------------------------------
void testApp::draw(){

	// draw the incoming, the grayscale, the bg and the thresholded difference
	ofSetHexColor(0xffffff);
	//colorImg.draw(20,20);
	grayImage.draw(360,20);
	//grayBg.draw(20,280);
	grayDiff.draw(360,280);

	// then draw the contours:

	ofFill();
	ofSetHexColor(0x333333);
	ofRect(360,540,320,240);
	ofSetHexColor(0xffffff);

	// we could draw the whole contour finder
	//contourFinder.draw(360,540);

	// or, instead we can draw each blob individually from the blobs vector,
	// this is how to get access to them:
    for (int i = 0; i < contourFinder.nBlobs; i++){
        contourFinder.blobs[i].draw(360,540);
        cout << "\nArea: " << contourFinder.blobs[i].area;
        cout << "\nLength: " << contourFinder.blobs[i].length;

        //vector <int> temp = contourFinder.blobs[i].pts[0];
        cout << "\nVector: " << contourFinder.blobs[i].pts[0].x;
        int aP = contourFinder.blobs[i].nPts;
        cout << "Aantal points: " << aP << endl;
        int x1;int x2;int y1;int y2;
        int lowestX=1000;
        int highestX=0;
        int lowestY=1000;
        int highestY=0;
        for (int j=0;j<aP;j++) {

          int x = contourFinder.blobs[i].pts[j].x;
          int y = contourFinder.blobs[i].pts[j].y;
          if (x < lowestX) {lowestX = x;y1=y;}
          if (x > highestX) {highestX = x;y2=y;}
          if (y < lowestY) {lowestY = y;x1=x;}
          if (y > highestY) {highestY = y;x2=x;}

        }
        cout << lowestX << "," << highestX << "," << lowestY << "," << highestY << endl;

        ofSetHexColor(0xffffff);
        ofLine(lowestX+360,y1+540,x1+360,lowestY+540);
        ofLine(lowestX+360,y1+540,x2+360,highestY+540);
        ofLine(highestX+360,y2+540,x1+360,lowestY+540);
        ofLine(highestX+360,y2+540,x2+360,highestY+540);


        }


	// finally, a report:
	ofSetHexColor(0xffffff);
	stringstream reportStr;
	reportStr << "bg subtraction and blob detection" << endl
			  << "press ' ' to capture bg" << endl
			  << "threshold " << threshold << " (press: +/-)" << endl
			  << "num blobs found " << contourFinder.nBlobs << ", fps: " << ofGetFrameRate();

	ofDrawBitmapString(reportStr.str(), 20, 600);

}

//--------------------------------------------------------------
void testApp::keyPressed(int key){

	switch (key){
		case ' ':
			bLearnBakground = true;
			break;
		case '+':
			threshold ++;
			if (threshold > 255) threshold = 255;
			break;
		case '-':
			threshold --;
			if (threshold < 0) threshold = 0;
			break;
	}
}


